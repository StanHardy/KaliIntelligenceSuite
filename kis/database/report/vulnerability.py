# -*- coding: utf-8 -*-
"""This module allows querying information about identified vulnerabilities (e.g., via shodan.io or nessus)."""

__author__ = "Lukas Reiter"
__license__ = "GPL v3.0"
__copyright__ = """Copyright 2022 Lukas Reiter

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
__version__ = 0.1

import argparse
from typing import List
from database.model import Host
from database.model import Workspace
from database.model import AdditionalInfo
from database.model import DnsResourceRecordType
from database.model import Service
from collectors.core import BaseUtils
from database.model import ReportScopeType
from database.report.core import BaseReport


class ReportClass(BaseReport):
    """
    this module allows querying information about identified vulnerabilities (e.g., via shodan.io or nessus)
    """

    def __init__(self, **kwargs) -> None:
        super().__init__(name="vulnerabilities",
                         title="Overview of Identified Vulnerabilities",
                         description="The table provides an overview of all vulnerabilities, which were identified by "
                                     "Nessus or Shodan.io.",
                         **kwargs)

    @staticmethod
    def get_add_argparse_arguments(parser_vulnerability: argparse.ArgumentParser):
        """
        This method adds the report's specific command line arguments.
        """
        # setup vulnerability parser
        parser_vulnerability.add_argument("-w", "--workspaces",
                                          metavar="WORKSPACE",
                                          help="query the given workspaces",
                                          nargs="+",
                                          type=str)
        parser_vulnerability.add_argument('--csv',
                                          default=True,
                                          action='store_true',
                                          help='returns gathered information in csv format')
        parser_vulnerability.add_argument('--filter', metavar='IP|NETWORK|DOMAIN|HOSTNAME', type=str, nargs='*',
                                          help='list of IP addresses (e.g., 192.168.1.1), IP networks (e.g., '
                                               '192.168.1.0/24), second-level domains (e.g., megacorpone.com), or '
                                               'host names (e.g., www.megacorpone.com) whose information shall be '
                                               'returned.per default, mentioned items are excluded. add + in front of '
                                               'each item (e.g., +192.168.0.1) to return only these items')
        parser_vulnerability.add_argument('--scope', choices=[item.name for item in ReportScopeType],
                                          help='return only information about in scope (within) or out of scope '
                                               '(outside) items. per default, all information is returned')

    def _filter(self, additional_info: AdditionalInfo) -> bool:
        """
        Method determines whether the given item shall be included into the report
        """
        return additional_info.is_processable(included_items=self._included_items,
                                              excluded_items=self._excluded_items,
                                              scope=self._scope)

    def get_csv(self) -> List[List[str]]:
        """
        This method returns all information as CSV.
        :return:
        """
        rows = [["Workspace",
                 "Network (NW)",
                 "Scope (NW)",
                 "Company (NW)",
                 "IP Address (IP)",
                 "IP Summary",
                 "In Scope (IP)",
                 "Host Names (HN)",
                 "Protocol",
                 "Port",
                 "Service",
                 "Nmap Service Name",
                 "Nessus Service Name",
                 "Sources",
                 "CVE",
                 "CVSSv3",
                 "CVSSv2",
                 "Plugin ID",
                 "Description"]]
        additional_info = self._session.query(AdditionalInfo)\
            .join(Service)\
            .join(Host)\
            .join(Workspace)\
            .filter(Workspace.name.in_([item.name for item in self._workspaces]),
                    AdditionalInfo.name == "CVEs").all()
        for item in additional_info:
            if self._filter(item):
                network = None
                companies = None
                network_scope = None
                host = item.service.host
                host_names = host.get_host_host_name_mappings_str([DnsResourceRecordType.a,
                                                                   DnsResourceRecordType.aaaa,
                                                                   DnsResourceRecordType.ptr])
                if host.ipv4_network:
                    network = host.ipv4_network.network
                    companies = host.ipv4_network.companies_str
                    network_scope = host.ipv4_network.scope_str
                for entry in BaseUtils.get_csv_as_list(item.values):
                    tmp = [host.workspace.name,
                           network,
                           network_scope,
                           companies,
                           host.address,
                           host.summary,
                           host.in_scope,
                           host_names,
                           item.service.protocol_str,
                           item.service.port,
                           item.service.protocol_port_str,
                           item.service.nmap_service_name,
                           item.service.nessus_service_name,
                           item.sources_str]
                    tmp.extend(entry)
                    rows.append(tmp)
        return rows
